# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{upstream_browser_version_short}`: The
# corresponding Safari/Chrome   version, but only with its major
# version. * `{qutebrowser_version}`: The currently running qutebrowser
# version.  The default value is equal to the default user agent of
# QtWebKit/QtWebEngine, but with the `QtWebEngine/...` part removed for
# increased compatibility.  Note that the value read from JavaScript is
# always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:136.0) Gecko/20100101 Firefox/136.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/ein/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/ein/.local/share/qutebrowser/userscripts/*')

# Render all web contents using a dark theme. On QtWebEngine < 6.7, this
# setting requires a restart and does not support URL patterns, only the
# global setting is applied. Example configurations from Chromium's
# `chrome://flags`: - "With simple HSL/CIELAB/RGB-based inversion": Set
# `colors.webpage.darkmode.algorithm` accordingly, and   set
# `colors.webpage.darkmode.policy.images` to `never`.  - "With selective
# image inversion": qutebrowser default settings.
# Type: Bool
c.colors.webpage.darkmode.enabled = False
config.set('colors.webpage.darkmode.policy.images', 'smart')
config.set('colors.webpage.darkmode.algorithm', 'lightness-hsl')
config.set('colors.webpage.preferred_color_scheme', 'dark')
config.set('colors.webpage.bg', 'black')

# Always restore open sites when qutebrowser is reopened.
config.set('auto_save.session', True)

# home page automatically
config.set('url.default_page', 'https://4get.hackliberty.org')
config.set('url.start_pages', 'https://4get.hackliberty.org')

# search engine
config.set('url.searchengines', {"DEFAULT": "https://4get.sudovanilla.org/web?s={}"})

# autoplay
config.set('content.autoplay', False)

c.content.blocking.adblock.lists = [ \
        "https://easylist.to/easylist/easylist.txt", \
        "https://easylist.to/easylist/easyprivacy.txt", \
        "https://secure.fanboy.co.nz/fanboy-cookiemonster.txt", \
        "https://easylist.to/easylist/fanboy-annoyance.txt", \
        "https://secure.fanboy.co.nz/fanboy-annoyance.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/quick-fixes.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2020.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2021.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2022.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2023.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2024.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2025.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/badware.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/badlists.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/unbreak.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/resource-abuse.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/privacy.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/lan-block.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-general.txt" \
        ]

c.content.blocking.enabled = True
c.content.blocking.hosts.lists = ['https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts']
c.content.blocking.method = 'both'

# Load a restored tab as soon as it takes focus.
config.set('session.lazy_restore', True)

# keybind for translating pages
config.bind('tt', 'spawn --userscript translate')

# Remember last used proxy/mode
import atexit
import os

def save_mode():
    mode_file = os.path.expanduser('~/.local/share/qutebrowser/mode.txt')
    dir_path = os.path.dirname(mode_file)
    os.makedirs(dir_path, exist_ok=True)
    with open(mode_file, 'w') as f:
        f.write(current_mode)

# This switches your current browsing session between normal, I2P, and Tor modes.
from qutebrowser.api import cmdutils, message

# Initialize original settings and current mode
original_proxy = c.content.proxy
original_start_pages = c.url.start_pages
original_default_page = c.url.default_page
original_searchengines = config.get('url.searchengines')
current_mode = 'normal'

# Define mode-specific settings
MODE_SETTINGS = {
    'normal': {
        'proxy': original_proxy,
        'start_pages': original_start_pages,
        'default_page': original_default_page,
        'searchengines': original_searchengines
    },
    'i2p': {
        'proxy': 'http://127.0.0.1:4444',
        'start_pages': '127.0.0.1:7657',
        'default_page': '127.0.0.1:7657',
        'searchengines': {"DEFAULT": "http://4get.maid.i2p/web?s={}"}
    },
    'tor': {
        'proxy': 'socks5://127.0.0.1:9050',
        'start_pages': 'https://check.torproject.org',
        'default_page': 'https://check.torproject.org',
        'searchengines': {"DEFAULT": "http://4get.hackliberty.org/web?s={}"}
    }
}

def set_mode(mode):
    """Set the browser to the specified mode with appropriate settings."""
    global current_mode
    try:
        if mode not in MODE_SETTINGS:
            raise ValueError(f"Unknown mode: {mode}")
        settings = MODE_SETTINGS[mode]
        c.content.proxy = settings['proxy']
        c.url.start_pages = settings['start_pages']
        c.url.default_page = settings['default_page']
        config.set('url.searchengines', settings['searchengines'])
        current_mode = mode
        message.info(f"Switched to {mode.upper()} mode")
        save_mode()
    except Exception as e:
        message.error(f"Error switching to {mode.upper()} mode: {e}")

@cmdutils.register()
def toggle_i2p():
    """Toggle between I2P mode and normal browsing mode."""
    set_mode('normal' if current_mode == 'i2p' else 'i2p')

@cmdutils.register()
def toggle_tor():
    """Toggle between Tor mode and normal browsing mode."""
    set_mode('normal' if current_mode == 'tor' else 'tor')

@cmdutils.register()
def check_mode():
    """Display the current browsing mode."""
    message.info(f"Currently in {current_mode.upper()} mode")

# Bind commands to keys
config.bind(';i', 'toggle-i2p')
config.bind(';t', 'toggle-tor')
config.bind(';m', 'check-mode')

# Load initial mode
mode_file = os.path.expanduser('~/.local/share/qutebrowser/mode.txt')
initial_mode = 'normal'
if os.path.exists(mode_file):
    with open(mode_file, 'r') as f:
        file_mode = f.read().strip()
    if file_mode in MODE_SETTINGS:
        initial_mode = file_mode
set_mode(initial_mode)

# function to toggle dark mode on domains
from qutebrowser.api import apitypes
from urllib.parse import urlparse, urlunparse
@cmdutils.register()
@cmdutils.argument('tab', value=cmdutils.Value.cur_tab)
def toggle_dark_mode_domain(tab: apitypes.Tab):
    url = tab.url()
    parsed = urlparse(url.toString())
    if url and url.scheme() in ['http', 'https']:
        domain = url.host()
        if domain:
            dark_mode_file = os.path.expanduser('~/.local/share/qutebrowser/dark_mode_domains.txt')
            try:
                with open(dark_mode_file, 'r') as f:
                    domains = set(line.strip() for line in f.readlines() if line.strip())
            except FileNotFoundError:
                domains = set()
            pattern = f'*://{domain}/*'
            if domain in domains:
                domains.remove(domain)
                config.set('colors.webpage.darkmode.enabled', False, pattern=pattern)
                action = "Removed"
            else:
                domains.add(domain)
                config.set('colors.webpage.darkmode.enabled', True, pattern=pattern)
                action = "Added"
            with open(dark_mode_file, 'w') as f:
                for d in domains:
                    f.write(d + '\n')
            message.info(f"{action} {domain} to/from dark mode list. Reload the page to see the effect.")
        else:
            message.error("No domain found")
    else:
        message.error("Not an HTTP/HTTPS URL")

# function to toggle dark mode on specific urls
@cmdutils.register()
@cmdutils.argument('tab', value=cmdutils.Value.cur_tab)
def toggle_dark_mode_url(tab: apitypes.Tab):
    url = tab.url()
    parsed = urlparse(url.toString())
    if url and url.scheme() in ['http', 'https']:
        parsed = urlparse(url.toString())
        pattern = urlunparse((parsed.scheme, parsed.netloc, parsed.path, '', '', ''))
        dark_mode_file = os.path.expanduser('~/.local/share/qutebrowser/dark_mode_urls.txt')
        try:
            with open(dark_mode_file, 'r') as f:
                patterns = set(line.strip() for line in f.readlines() if line.strip())
        except FileNotFoundError:
            patterns = set()
        if pattern in patterns:
            patterns.remove(pattern)
            config.set('colors.webpage.darkmode.enabled', False, pattern=pattern)
            action = "Removed"
        else:
            patterns.add(pattern)
            config.set('colors.webpage.darkmode.enabled', True, pattern=pattern)
            action = "Added"
        with open(dark_mode_file, 'w') as f:
            for p in patterns:
                f.write(p + '\n')
        message.info(f"{action} {pattern} to/from dark mode list. Reload the page to see the effect.")
    else:
        message.error("Not an HTTP/HTTPS URL")

# Load and apply dark mode for domains
dark_mode_domains_file = os.path.expanduser('~/.local/share/qutebrowser/dark_mode_domains.txt')
if os.path.exists(dark_mode_domains_file):
    with open(dark_mode_domains_file, 'r') as f:
        domains = [line.strip() for line in f.readlines() if line.strip()]
    for domain in domains:
        config.set('colors.webpage.darkmode.enabled', True, f'*://{domain}/*')

# Load and apply dark mode for URLs
dark_mode_urls_file = os.path.expanduser('~/.local/share/qutebrowser/dark_mode_urls.txt')
if os.path.exists(dark_mode_urls_file):
    with open(dark_mode_urls_file, 'r') as f:
        patterns = [line.strip() for line in f.readlines() if line.strip()]
    for pattern in patterns:
        config.set('colors.webpage.darkmode.enabled', True, pattern)


config.bind(',d', 'toggle-dark-mode-domain')
config.bind(',u', 'toggle-dark-mode-url')
