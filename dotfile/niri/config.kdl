input {
    keyboard {
        xkb {
            layout "us"
            model ""
            rules ""
            variant ""
        }
        repeat-delay 600
        repeat-rate 25
        track-layout "global"
    }
    touchpad {
        tap
        dwt
        dwtp
        natural-scroll
        accel-speed 0.000000
        scroll-method "two-finger"
        click-method "clickfinger"
    }
    mouse { accel-speed 1.000000; }
    trackpoint { accel-speed 0.000000; }
    trackball { accel-speed 0.000000; }
    tablet { map-to-output "eDP-1"; }
    touch { map-to-output "eDP-1"; }
    warp-mouse-to-focus
    focus-follows-mouse
}
// output "eDP-1" {
//     background-color "#003300"
//     scale 1.000000
//     transform "normal"
//     position x=0 y=0
//     mode "1920x1080@60.000000"
//     variable-refresh-rate on-demand=false
// }
// screenshot-path "~/Pictures/Screenshots from %Y-%m-%d %H-%M-%S.png"
prefer-no-csd
layout {
    gaps 8
    always-center-single-column
    struts {
        left 30
        right 30
        top 10
        bottom 10
    }
    focus-ring { off; }
    border {
        width 4
        active-gradient angle=45 from="#c66e25" relative-to="workspace-view" to="#c66e25"
        inactive-gradient angle=45 from="#585b70" relative-to="workspace-view" to="#585b70"
    }
    insert-hint { color "rgba(127 200 255 50%)"; }
    default-column-width { proportion 0.5; }
    preset-column-widths {
        proportion 0.500000
        proportion 1.000000
    }
    center-focused-column "never"
}
cursor {
    xcursor-theme "default"
    xcursor-size 24
}
hotkey-overlay { skip-at-startup; }
environment {
    "CLUTTER_BACKEND" "wayland"
    DISPLAY ":0"
    "GDK_BACKEND" "wayland,x11"
    "MOZ_ENABLE_WAYLAND" "1"
    "NIXOS_OZONE_WL" "1"
    "QT_QPA_PLATFORM" "wayland;xcb"
    "QT_WAYLAND_DISABLE_WINDOWDECORATION" "1"
    "SDL_VIDEODRIVER" "wayland"
    "XDG_SESSION_TYPE" "wayland"
}
binds {
    // workspaces
    Ctrl+KP_End { focus-workspace 1; }
    Ctrl+KP_Down { focus-workspace 2; }
    Ctrl+KP_Next { focus-workspace 3; }
    Ctrl+KP_Left { focus-workspace 4; }
    Ctrl+KP_Begin { focus-workspace 5; }
    Ctrl+KP_Right { focus-workspace 6; }
    Ctrl+KP_Home { focus-workspace 7; }
    Ctrl+KP_Up { focus-workspace 8; }
    Ctrl+KP_Prior { focus-workspace 9; }
    Alt+KP_End   { move-window-to-workspace 1; }
    Alt+KP_Down  { move-window-to-workspace 2; }
    Alt+KP_Next  { move-window-to-workspace 3; }
    Alt+KP_Left  { move-window-to-workspace 4; }
    Alt+KP_Begin { move-window-to-workspace 5; }
    Alt+KP_Right { move-window-to-workspace 6; }
    Alt+KP_Home  { move-window-to-workspace 7; }
    Alt+KP_Up    { move-window-to-workspace 8; }
    Alt+KP_Prior { move-window-to-workspace 9; }
    Ctrl+Left { spawn "/home/wrq/.config/niri/scripts/workspace-left.sh"; }
    Ctrl+Right { spawn "/home/wrq/.config/niri/scripts/workspace-right.sh"; }
    Mod+Left { focus-workspace-up; }
    Mod+Right { focus-workspace-down; }
    Mod+WheelScrollDown cooldown-ms=150 { spawn "/home/wrq/.config/niri/scripts/workspace-right.sh"; }
    Mod+WheelScrollUp cooldown-ms=150 { spawn "/home/wrq/.config/niri/scripts/workspace-left.sh"; }
    Alt+WheelScrollDown cooldown-ms=150 { focus-column-right; }
    Alt+WheelScrollUp cooldown-ms=150 { focus-column-left; }
    MouseMiddle { switch-preset-column-width; }
    Mod+Return { spawn "google-chrome"; }
    Alt+Return { spawn "st"; }
    Alt+Q { close-window; }
    Alt+Space { spawn "wofi"; }
    Alt+f { fullscreen-window; }
    Alt+Left { focus-column-left; }
    Alt+Right { focus-column-right; }
    Ctrl+Mod+Return { spawn "sh" "-c" "st -e yazi"; }
    Ctrl+Alt+a { spawn "sh" "-c" "grim -g \"$(slurp)\" - | swappy -f -"; }
    Mod+Alt+Return { spawn "sh" "-c" "mpv --player-operation-mode=pseudo-gui"; }
    Ctrl+Return { spawn "sh" "-c" "bash ~/tool/clash.sh "; }
    Ctrl+Alt+Return { spawn "sh" "-c" "st -e ~/tool/ter-multiplexer.sh"; }
        // Ctrl+Alt+Return { spawn "sh" "-c" ""; }
    Mod+Space { spawn "sh" "-c" "rofi -normal-window -theme  ~/.config/rofi/themes/fancy2.rasi -modi blocks -show blocks -blocks-wrap ~/.config/rofi/history.py"; }
    Ctrl+Space { spawn "sh" "-c" "rofi -normal-window -theme ~/.config/rofi/themes/fancy2.rasi -modi blocks -show blocks -blocks-wrap ~/.config/rofi/search.py "; }
    Ctrl+Shift+Return { spawn "sh" "-c" "st -e aerc"; }
    Mod+L { spawn "sh" "-c" "swaylock -f -c 000000"; }
    Mod+H {spawn "sh" "-c" "bash ~/tool/hide_waybar_niri.sh";}


    Alt+Backslash { toggle-window-floating; }

    Mod+Shift+Left { move-column-left; }
    Mod+Shift+Right { move-column-right; }
    Mod+Ctrl+Left { move-window-to-workspace-up; }
    Mod+Ctrl+Right { move-window-to-workspace-down; }
    Mod+A { maximize-column; }
    Mod+m { quit; }
    Alt+A { switch-preset-column-width; }


    // Alt+Up { focus-window-up; }
    // Alt+Down { focus-window-down; }
    // Mod+Comma { consume-window-into-column; }
    // Mod+Ctrl+Down { move-window-down; }

    // Mod+Ctrl+Up { move-window-up; }
    // Mod+Period { expel-window-from-column; }
    // Mod+Print { screenshot-screen; }
    // Mod+Shift+I { move-workspace-up; }
    // Mod+Shift+U { move-workspace-down; }
    // Mod+Shift+Minus { set-window-height "-10%"; }
    // Mod+Shift+Plus { set-window-height "+10%"; }


    Mod+End { focus-column-last; }
    Mod+Home { focus-column-first; }
    Mod+Shift+End { move-column-to-last; }
    Mod+Shift+Home { move-column-to-first; }


    Ctrl+Alt+Left { set-column-width "-10%"; }
    Ctrl+Alt+Right { set-column-width "+10%"; }

    Alt+S { center-column; }

}
workspace "1"
workspace "2"
workspace "3"
workspace "4"
workspace "5"
workspace "6"
workspace "7"
workspace "8"
workspace "9"


spawn-at-startup "/home/wrq/.config/niri/scripts/startup.sh"

window-rule {
    draw-border-with-background false
    geometry-corner-radius 8.000000 8.000000 8.000000 8.000000
    clip-to-geometry true
}

// window-rule {
//     match is-focused=false
//     opacity 0.950000
// }

window-rule {
    match title="QQ"
    open-on-workspace "3"
    open-maximized true
    open-focused true
    opacity 1.000000
}

window-rule {
    match title="图片查看器"
    open-focused true
    open-floating true
    opacity 1.000000
}
window-rule {
    match app-id="yesplaymusic"
    open-on-workspace "5"
    open-focused true
    open-floating true
    opacity 1.000000
    default-floating-position x=180 y=0 relative-to="bottom-left"
}

window-rule {
    match app-id="Rofi"
    open-focused true
    open-floating true
    opacity 1.000000
}

window-rule {
    match title="qxdrag"
    open-focused true
    open-floating true
    opacity 1.000000
}


window-rule {
    match app-id="Google-chrome"
    open-on-workspace "4"
    open-maximized true
    open-focused true
    opacity 1.000000
}
window-rule {
    match app-id="mpv"
    open-on-workspace "2"
    open-maximized true
    open-focused true
    opacity 1.000000
}

window-rule {
    match app-id="obs"
    open-on-workspace "6"
    open-maximized true
    open-focused true
    opacity 1.000000
}



animations {
    slowdown 0.900000
    workspace-switch { spring damping-ratio=1.000000 epsilon=0.000100 stiffness=2000; }
    horizontal-view-movement { spring damping-ratio=1.000000 epsilon=0.000100 stiffness=1000; }
    window-movement { spring damping-ratio=1.000000 epsilon=0.000100 stiffness=1000; }
    window-close {
        duration-ms 150
        curve "ease-out-quad"
        custom-shader "vec4 close_color(vec3 coords_geo, vec3 size_geo) {\n  // For this shader, set animation curve to linear for best results.\n\n  // Simulate an accelerated fall: square the (linear) progress.\n  float progress = niri_clamped_progress * niri_clamped_progress;\n\n  // Get our rotation pivot point coordinates at the bottom center of the window.\n  vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;\n\n  // Move the window down to simulate a fall.\n  coords.y -= progress * 200.0;\n\n  // Randomize rotation direction and maximum angle.\n  float random = (niri_random_seed - 0.5) / 2.0;\n  random = sign(random) - random;\n  float max_angle = 0.05 * random;\n\n  // Rotate the window around our pivot point.\n  float angle = progress * max_angle;\n  mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n  coords = rotate * coords;\n\n  // Transform the coordinates back.\n  coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);\n\n  // Sample the window texture.\n  vec3 coords_tex = niri_geo_to_tex * coords_geo;\n  vec4 color = texture2D(niri_tex, coords_tex.st);\n\n  // Multiply by alpha to fade out.\n  return color * (1.0 - niri_clamped_progress);\n}\n"
    }
    window-resize {
        spring damping-ratio=1.000000 epsilon=0.000100 stiffness=800
        custom-shader "vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {\n  vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;\n\n  vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;\n  vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;\n\n  // We can crop if the current window size is smaller than the next window\n  // size. One way to tell is by comparing to 1.0 the X and Y scaling\n  // coefficients in the current-to-next transformation matrix.\n  bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;\n  bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;\n\n  vec3 coords = coords_stretch;\n  if (can_crop_by_x)\n      coords.x = coords_crop.x;\n  if (can_crop_by_y)\n      coords.y = coords_crop.y;\n\n  vec4 color = texture2D(niri_tex_next, coords.st);\n\n  // However, when we crop, we also want to crop out anything outside the\n  // current geometry. This is because the area of the shader is unspecified\n  // and usually bigger than the current geometry, so if we don't fill pixels\n  // outside with transparency, the texture will leak out.\n  //\n  // When stretching, this is not an issue because the area outside will\n  // correspond to client-side decoration shadows, which are already supposed\n  // to be outside.\n  if (can_crop_by_x && (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x))\n      color = vec4(0.0);\n  if (can_crop_by_y && (coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y))\n      color = vec4(0.0);\n\n  return color;\n}\n"
    }
}
